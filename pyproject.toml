[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "business-agent-system"
version = "1.0.0"
description = "AI-powered autonomous business management system with intelligent agents for accounting, inventory, and HR"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Brian Gyss", email = "bgyss@hey.com"},
]
maintainers = [
    {name = "Brian Gyss", email = "bgyss@hey.com"},
]
keywords = [
    "ai", "business-management", "automation", "agents", "accounting", 
    "inventory", "hr", "simulation", "anthropic", "claude"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business",
    "Topic :: Office/Business :: Financial :: Accounting",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8.1"
dependencies = [
    "anthropic>=0.25.0",
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "streamlit>=1.28.0",
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "python-dotenv>=1.0.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "python-dateutil>=2.8.0",
    "pyyaml>=6.0.0",
    "aiofiles>=23.0.0",
    "redis>=5.0.0",
    "plotly>=5.17.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "selenium>=4.15.0",
    "pytest-selenium>=4.1.0",
    "webdriver-manager>=4.0.0",
    "pytest-html>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "line-profiler>=4.1.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
performance = [
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "line-profiler>=4.1.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]
all = [
    "business-agent-system[dev,test,docs,performance]",
]

[project.urls]
Homepage = "https://github.com/briangyss/business-agent-system"
Documentation = "https://github.com/briangyss/business-agent-system#readme"
Repository = "https://github.com/briangyss/business-agent-system.git"
"Bug Tracker" = "https://github.com/briangyss/business-agent-system/issues"

[project.scripts]
business-agent-system = "main:main"
bas-dashboard = "run_dashboard:main"

[tool.setuptools.packages.find]
include = ["agents*", "models*", "simulation*", "dashboard*", "config*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.sql"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "selenium>=4.15.0",
    "pytest-selenium>=4.1.0",
    "webdriver-manager>=4.0.0",
    "pytest-html>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "types-pyyaml>=6.0.0",
    "types-redis>=4.6.0",
    "pytest-benchmark>=4.0.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
    "line-profiler>=4.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["agents", "models", "simulation", "dashboard"]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "streamlit.*",
    "plotly.*",
    "redis.*",
    "yaml.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=agents",
    "--cov=models", 
    "--cov=simulation",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore:function ham\\(\\) is deprecated:DeprecationWarning",
    "ignore::pytest.PytestDeprecationWarning",
]

[tool.coverage.run]
source = ["agents", "models", "simulation"]
omit = [
    "*/tests/*",
    "*/test_*",
    "dashboard/*",  # UI code often hard to test
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]