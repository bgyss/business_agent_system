name: Incremental CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Cancel previous runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Detect changed files to enable incremental validation
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      python-files: ${{ steps.changes.outputs.python-files }}
      config-files: ${{ steps.changes.outputs.config-files }}
      test-files: ${{ steps.changes.outputs.test-files }}
      has-python-changes: ${{ steps.changes.outputs.has-python-changes }}
      has-config-changes: ${{ steps.changes.outputs.has-config-changes }}
      has-test-changes: ${{ steps.changes.outputs.has-test-changes }}
      
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changed files
      id: changes
      run: |
        # Get changed files between base and head
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.event.after }}"
        fi
        
        # For push to main with no previous commit, compare with HEAD~1
        if [ "$BASE_SHA" == "0000000000000000000000000000000000000000" ]; then
          BASE_SHA="HEAD~1"
        fi
        
        echo "Comparing $BASE_SHA...$HEAD_SHA"
        
        # Get all changed files
        CHANGED_FILES=$(git diff --name-only $BASE_SHA...$HEAD_SHA || echo "")
        echo "All changed files:"
        echo "$CHANGED_FILES"
        
        # Filter Python files in key directories
        PYTHON_FILES=$(echo "$CHANGED_FILES" | grep -E '^(agents/|models/|simulation/|dashboard/|utils/|main\.py|scripts/).*\.py$' || echo "")
        CONFIG_FILES=$(echo "$CHANGED_FILES" | grep -E '\.(yml|yaml|toml|json)$' || echo "")
        TEST_FILES=$(echo "$CHANGED_FILES" | grep -E '^tests/.*\.py$' || echo "")
        
        echo "Python files changed:"
        echo "$PYTHON_FILES"
        echo "Config files changed:"
        echo "$CONFIG_FILES"
        echo "Test files changed:"
        echo "$TEST_FILES"
        
        # Set outputs - convert to JSON arrays for matrix strategy
        if [ -n "$PYTHON_FILES" ]; then
          PYTHON_JSON=$(echo "$PYTHON_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "python-files=$PYTHON_JSON" >> $GITHUB_OUTPUT
          echo "has-python-changes=true" >> $GITHUB_OUTPUT
        else
          echo "python-files=[]" >> $GITHUB_OUTPUT
          echo "has-python-changes=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$CONFIG_FILES" ]; then
          CONFIG_JSON=$(echo "$CONFIG_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "config-files=$CONFIG_JSON" >> $GITHUB_OUTPUT
          echo "has-config-changes=true" >> $GITHUB_OUTPUT
        else
          echo "config-files=[]" >> $GITHUB_OUTPUT
          echo "has-config-changes=false" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$TEST_FILES" ]; then
          TEST_JSON=$(echo "$TEST_FILES" | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "test-files=$TEST_JSON" >> $GITHUB_OUTPUT
          echo "has-test-changes=true" >> $GITHUB_OUTPUT
        else
          echo "test-files=[]" >> $GITHUB_OUTPUT
          echo "has-test-changes=false" >> $GITHUB_OUTPUT
        fi

  # Incremental validation for changed Python files
  incremental-validation:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-python-changes == 'true'
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        file: ${{ fromJson(needs.detect-changes.outputs.python-files) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Validate file with quality gate
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "üîç Validating file: ${{ matrix.file }}"
        uv run python scripts/validate-file.py "${{ matrix.file }}" --no-color
        
    - name: Upload validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: validation-results-${{ matrix.python-version }}-${{ hashFiles(matrix.file) }}
        path: |
          validation-*.json
          validation-*.log
        retention-days: 7

  # Quality gate enforcement for critical changes
  quality-gate-enforcement:
    runs-on: ubuntu-latest
    needs: [detect-changes, incremental-validation]
    if: always() && needs.detect-changes.outputs.has-python-changes == 'true'
    strategy:
      matrix:
        python-version: ["3.11"]  # Run on latest Python only for enforcement
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run quality gate on changed files
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        # Convert JSON array back to space-separated list
        CHANGED_FILES='${{ needs.detect-changes.outputs.python-files }}'
        FILES_LIST=$(echo "$CHANGED_FILES" | jq -r '.[]' | tr '\n' ' ')
        
        echo "üö™ Running quality gate on changed files: $FILES_LIST"
        uv run python scripts/quality-gate.py \
          --mode normal \
          --files $FILES_LIST \
          --output quality-gate-results.json \
          --no-color
    
    - name: Upload quality gate results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-gate-results-${{ matrix.python-version }}
        path: |
          quality-gate-results.json
          quality-gate-*.log

  # Comprehensive testing for critical paths
  comprehensive-testing:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-python-changes == 'true' || needs.detect-changes.outputs.has-test-changes == 'true'
    strategy:
      matrix:
        python-version: ["3.8", "3.11"]  # Test on min and max supported versions
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run targeted tests
      env:
        ANTHROPIC_API_KEY: test-api-key-for-testing
      run: |
        # Determine which tests to run based on changed files
        CHANGED_FILES='${{ needs.detect-changes.outputs.python-files }}'
        
        # Run unit tests
        echo "üß™ Running unit tests..."
        uv run pytest tests/unit/ -v \
          --cov=agents --cov=models --cov=simulation --cov=utils \
          --cov-report=xml --cov-report=term-missing \
          --junit-xml=test-results-unit.xml
        
        # Run integration tests on Python 3.11 only
        if [ "${{ matrix.python-version }}" == "3.11" ]; then
          echo "üîó Running integration smoke tests..."
          uv run pytest tests/integration/ -v \
            --asyncio-mode=auto \
            -m "smoke" \
            --junit-xml=test-results-integration.xml || echo "Integration tests completed with warnings"
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results-*.xml
          coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  # Security scanning for changed files
  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-python-changes == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"
    
    - name: Install dependencies
      run: uv sync --extra security
    
    - name: Run security checks on changed files
      run: |
        # Convert JSON array to space-separated list
        CHANGED_FILES='${{ needs.detect-changes.outputs.python-files }}'
        FILES_LIST=$(echo "$CHANGED_FILES" | jq -r '.[]' | tr '\n' ' ')
        
        echo "üîí Running security checks on: $FILES_LIST"
        
        # Run bandit on changed files
        if [ -n "$FILES_LIST" ]; then
          uv run bandit $FILES_LIST -ll || echo "Security scan completed with warnings"
        fi
        
        # Run safety check on dependencies
        uv run safety check --json || echo "Dependency security check completed with warnings"

  # Configuration validation
  config-validation:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-config-changes == 'true'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v2
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Validate configuration files
      run: |
        echo "üîß Validating configuration files..."
        
        # Validate YAML files
        for file in $(echo '${{ needs.detect-changes.outputs.config-files }}' | jq -r '.[]' | grep -E '\.(yml|yaml)$'); do
          echo "Validating YAML: $file"
          python -c "import yaml; yaml.safe_load(open('$file'))" || exit 1
        done
        
        # Validate JSON files
        for file in $(echo '${{ needs.detect-changes.outputs.config-files }}' | jq -r '.[]' | grep -E '\.json$'); do
          echo "Validating JSON: $file"
          python -c "import json; json.load(open('$file'))" || exit 1
        done
        
        # Validate TOML files
        for file in $(echo '${{ needs.detect-changes.outputs.config-files }}' | jq -r '.[]' | grep -E '\.toml$'); do
          echo "Validating TOML: $file"
          python -c "import tomllib; tomllib.load(open('$file', 'rb'))" || exit 1
        done

  # Final validation gate - all checks must pass
  final-validation-gate:
    runs-on: ubuntu-latest
    needs: [detect-changes, incremental-validation, quality-gate-enforcement, comprehensive-testing, security-scan, config-validation]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "üèÅ Final validation gate - checking all job statuses..."
        
        # Check if any required jobs failed
        if [ "${{ needs.incremental-validation.result }}" == "failure" ]; then
          echo "‚ùå Incremental validation failed"
          exit 1
        fi
        
        if [ "${{ needs.quality-gate-enforcement.result }}" == "failure" ]; then
          echo "‚ùå Quality gate enforcement failed"
          exit 1
        fi
        
        if [ "${{ needs.comprehensive-testing.result }}" == "failure" ]; then
          echo "‚ùå Comprehensive testing failed"
          exit 1
        fi
        
        if [ "${{ needs.security-scan.result }}" == "failure" ]; then
          echo "‚ùå Security scan failed"
          exit 1
        fi
        
        if [ "${{ needs.config-validation.result }}" == "failure" ]; then
          echo "‚ùå Configuration validation failed"
          exit 1
        fi
        
        echo "‚úÖ All validation checks passed!"
        
    - name: Summary
      run: |
        echo "üìä Incremental CI Summary:"
        echo "=========================="
        echo "Python files changed: ${{ needs.detect-changes.outputs.has-python-changes }}"
        echo "Config files changed: ${{ needs.detect-changes.outputs.has-config-changes }}"
        echo "Test files changed: ${{ needs.detect-changes.outputs.has-test-changes }}"
        echo ""
        echo "Jobs executed:"
        echo "- Incremental validation: ${{ needs.incremental-validation.result }}"
        echo "- Quality gate enforcement: ${{ needs.quality-gate-enforcement.result }}"
        echo "- Comprehensive testing: ${{ needs.comprehensive-testing.result }}"
        echo "- Security scan: ${{ needs.security-scan.result }}"
        echo "- Config validation: ${{ needs.config-validation.result }}"
        echo ""
        echo "üéâ Incremental CI completed successfully!"